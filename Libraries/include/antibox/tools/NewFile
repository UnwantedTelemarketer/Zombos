#include <iostream>
#include <fstream>
#include <map>
#include <string>
#include <random>
#include <ctime>
#include <sstream>

std::string cleanWord(const std::string& word) {
    std::string result;
    for (char ch : word) {
        // cast to unsigned char before passing to std:: functions
        if (std::isalpha(static_cast<unsigned char>(ch))) {
            result += std::tolower(static_cast<unsigned char>(ch));
        }
    }
    return result;
}

void trainModel(const std::vector<std::string>& text, std::map<std::pair<std::string, std::string>, std::map<std::string, int>>& model) {
    for (size_t i = 0; i < text.size() - 2; ++i) {
        //pair the first two words
        auto prefix = std::make_pair(text[i], text[i + 1]);
        //get word after two words
        std::string nextWord = text[i + 2];
        //add those both
        model[prefix][nextWord]++;
    }
}

std::string sampleNextWord(const std::map<std::string, int>& nextWords) {
    int total = 0;
    for (auto& word : nextWords) total += word.second;

    std::random_device rd;
    std::mt19937 gen(rd());
    std::uniform_int_distribution<> dist(1, total);

    int rnd = dist(gen);
    for (auto& word : nextWords) {
        rnd -= word.second;
        if (rnd <= 0) return word.first;
    }

    return "??"; // fallback
}

//takes a model, the start of something, and length of generated text
std::string generateText(
    const std::map<std::pair<std::string, std::string>, std::map<std::string, int>>& model,
    std::string start1, std::string start2,
    int length
) {
    std::string result = start1 + " " + start2;
    std::pair<std::string, std::string> prefix = { start1, start2 };

    for (int i = 0; i < length; ++i) {
        if (model.find(prefix) == model.end()) {
            std::cout << "\n[Info] No continuation for prefix: " << prefix.first << " " << prefix.second << "\n";
            break;
        }

        std::string nextWord = sampleNextWord(model.at(prefix));
        result += " " + nextWord;

        // Shift the window
        prefix = { prefix.second, nextWord };
    }

    return result;
}


int main() {
    std::string fileName = "horror.txt";
    std::ifstream file(fileName);
    if (!file.is_open()) {
        std::cerr << "Error: Could not open file '" << fileName << "'\n";
        return 1;
    }

    std::vector<std::string> text;
    std::string line, word;

    // Read and tokenize input
    while (std::getline(file, line)) {
        std::istringstream iss(line);
        while (iss >> word) {
            std::string cleaned = cleanWord(word);
            if (!cleaned.empty()) text.push_back(cleaned);
        }
    }
    file.close();

    if (text.size() < 3) {
        std::cerr << "Error: Not enough words in the corpus.\n";
        return 1;
    }

    // Build the model
    std::map<std::pair<std::string, std::string>, std::map<std::string, int>> model;
    trainModel(text, model);

    // User input
    std::string start1, start2;
    std::cout << "Enter two starting words: ";
    std::cin >> start1 >> start2;
    start1 = cleanWord(start1);
    start2 = cleanWord(start2);

    // Generate text
    std::string generated = generateText(model, start1, start2, 25);
    std::cout << "\nGenerated text:\n" << generated << "\n";

    return 0;
}